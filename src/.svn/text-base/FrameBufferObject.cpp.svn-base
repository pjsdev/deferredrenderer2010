#include "FrameBufferObject.h"
#include "ngl/Types.h"
#include "iostream"

FrameBufferObject::FrameBufferObject(unsigned int _width, unsigned int _height, const std::string &_name):
        m_width(_width),m_height(_height),m_name(_name)
{
}

FrameBufferObject::~FrameBufferObject()
{}

void FrameBufferObject::bind()
{
    glBindFramebuffer(GL_FRAMEBUFFER_EXT, m_FBOid);
    glBindRenderbuffer(GL_RENDERBUFFER_EXT, m_Depth);
}

void FrameBufferObject::checkStatus()
{
    GLenum status = glCheckFramebufferStatus(GL_FRAMEBUFFER);

    switch(status)
    {
    case GL_FRAMEBUFFER_COMPLETE:
        std::cout << "Complete FBO" << std::endl;
        break;
    case GL_FRAMEBUFFER_UNSUPPORTED:
        std::cout << "Unsupported FBO" << std::endl;
        break;
    default:
        break;
    }
}

void FrameBufferObject::createTexture(unsigned int &_id)
{
    glGenTextures(1, &_id);
    glBindTexture(GL_TEXTURE_2D, _id);
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_GENERATE_MIPMAP, GL_TRUE); // automatic mipmap
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, m_width, m_height, 0,
                 GL_RGBA, GL_UNSIGNED_BYTE, 0);
    glBindTexture(GL_TEXTURE_2D, 0);
}

void FrameBufferObject::create(){

    createTexture(m_Color1);
    createTexture(m_Color2);
    createTexture(m_Color3);
    createTexture(m_Color4);

    // create a renderbuffer object to store depth info
    glGenRenderbuffers(1, &m_Depth);
    glBindRenderbuffer(GL_RENDERBUFFER, m_Depth);
    glRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH_COMPONENT,
                             m_width, m_height);
    glBindRenderbuffer(GL_RENDERBUFFER, 0);

    // create a framebuffer object
    glGenFramebuffers(1, &m_FBOid);
    glBindFramebuffer(GL_FRAMEBUFFER, m_FBOid);

    // attach the textures to FBO color attachment point
    glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0,
                              GL_TEXTURE_2D, m_Color1, 0);
    glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT1,
                              GL_TEXTURE_2D, m_Color2, 0);
    glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT2,
                              GL_TEXTURE_2D, m_Color3, 0);
    glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT3,
                              GL_TEXTURE_2D, m_Color4, 0);


    // attach the renderbuffer to depth attachment point
    glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT,
                                 GL_RENDERBUFFER, m_Depth);

    checkStatus();
    glBindFramebuffer(GL_FRAMEBUFFER, 0);
}

void FrameBufferObject::activateAllTargets()
{

    GLenum buffers[] = {
        GL_COLOR_ATTACHMENT0,
        GL_COLOR_ATTACHMENT1,
        GL_COLOR_ATTACHMENT2,
        GL_COLOR_ATTACHMENT3
    };

    glDrawBuffers(4, buffers);

}

void FrameBufferObject::activateTarget1()
{

    GLenum buffers[] = {
        GL_COLOR_ATTACHMENT0
    };

    glDrawBuffers(1, buffers);

}

void FrameBufferObject::activateTarget2()
{
    GLenum buffers[] = {
        GL_COLOR_ATTACHMENT1
    };

    glDrawBuffers(1, buffers);
}

void FrameBufferObject::activateTarget3()
{
    GLenum buffers[] = {
        GL_COLOR_ATTACHMENT2
    };

    glDrawBuffers(1, buffers);

}

void FrameBufferObject::activateTarget4()
{
    GLenum buffers[] = {
        GL_COLOR_ATTACHMENT3
    };

    glDrawBuffers(1, buffers);
}

void FrameBufferObject::unbind()
{
    glBindFramebuffer(GL_FRAMEBUFFER, 0);
    glBindRenderbuffer(GL_RENDERBUFFER, 0);
}
